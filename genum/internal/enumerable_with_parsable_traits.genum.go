// Code generated by genum DO NOT EDIT.
package internal

import (
	"encoding/json"
	"fmt"
	"slices"
	"strconv"

	"github.com/drshriveer/gtools/genum"
	"gopkg.in/yaml.v3"
)

var _EnumerableWithParsableTraitsValues = []EnumerableWithParsableTraits{
	P1,
	P2,
	P3,
}

// AlsoSometimesNonParsable returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e EnumerableWithParsableTraits) AlsoSometimesNonParsable() int {
	switch e {
	case P1:
		return _AlsoSometimesNonParsable
	case P2:
		return 2
	case P3:
		return 3
	}

	return *new(int)
}

// NonParsable returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e EnumerableWithParsableTraits) NonParsable() string {
	switch e {
	case P1:
		return _NonParsable
	case P2:
		return "non-parsable"
	case P3:
		return "non-parsable"
	}

	return *new(string)
}

// OtherEnum returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e EnumerableWithParsableTraits) OtherEnum() MyEnum {
	switch e {
	case P1:
		return _OtherEnum
	case P2:
		return Enum1Value1
	case P3:
		return Enum1Value2
	}

	return *new(MyEnum)
}

// Parsable returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e EnumerableWithParsableTraits) Parsable() string {
	switch e {
	case P1:
		return _Parsable
	case P2:
		return "2"
	case P3:
		return "3"
	}

	return *new(string)
}

// SometimesNonParsable returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e EnumerableWithParsableTraits) SometimesNonParsable() int {
	switch e {
	case P1:
		return _SometimesNonParsable
	case P2:
		return 2
	case P3:
		return 1
	}

	return *new(int)
}

// IsValid returns true if the enum value is, in fact, valid.
func (e EnumerableWithParsableTraits) IsValid() bool {
	for _, v := range _EnumerableWithParsableTraitsValues {
		if v == e {
			return true
		}
	}
	return false
}

// Values returns a list of all potential values of this enum.
func (EnumerableWithParsableTraits) Values() []EnumerableWithParsableTraits {
	return slices.Clone(_EnumerableWithParsableTraitsValues)
}

// StringValues returns a list of all potential values of this enum as strings.
// Note: This does not return duplicates.
func (EnumerableWithParsableTraits) StringValues() []string {
	return []string{
		"P1",
		"P2",
		"P3",
	}
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e EnumerableWithParsableTraits) String() string {
	switch e {
	case P1:
		return "P1"
	case P2:
		return "P2"
	case P3:
		return "P3"
	default:
		return fmt.Sprintf("UndefinedEnumerableWithParsableTraits:%d", e)
	}
}

// ParseString will return a value as defined in string form.
func (e EnumerableWithParsableTraits) ParseString(text string) (EnumerableWithParsableTraits, error) {
	return ParseEnumerableWithParsableTraits(text)
}

// ParseEnumerableWithParsableTraits will attempt to parse the value of a EnumerableWithParsableTraits from either its string form
// or any value of a trait flagged with the --parsableByTrait flag
func ParseEnumerableWithParsableTraits(input any) (EnumerableWithParsableTraits, error) {
	switch input {
	case "P1", _AlsoSometimesNonParsable, _OtherEnum, _Parsable:
		return P1, nil
	case "P2", 2, Enum1Value1, "2":
		return P2, nil
	case "P3", 3, Enum1Value2, "3":
		return P3, nil
	default:
		return 0, fmt.Errorf("`%+v` could not be parsed to enum of type EnumerableWithParsableTraits", input)
	}
}

// ParseGeneric calls TypedEnum.Parse but returns the result
// in the generic genum.Enum interface. Which is useful when you are only able to work with
// the un-typed interface.
func (e EnumerableWithParsableTraits) ParseGeneric(input any) (genum.Enum, error) {
	return ParseEnumerableWithParsableTraits(input)
}

// MarshalJSON implements the json.Marshaler interface for EnumerableWithParsableTraits.
func (e EnumerableWithParsableTraits) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EnumerableWithParsableTraits.
func (e *EnumerableWithParsableTraits) UnmarshalJSON(data []byte) error {
	// We always support strings.
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
		var err error
		*e, err = ParseEnumerableWithParsableTraits(s)
		if err == nil {
			return nil
		}
	}
	// ints:
	var sint64 int64
	if err := json.Unmarshal(data, &s); err == nil {
		*e, err = ParseEnumerableWithParsableTraits(MyEnum(sint64))
		if err == nil {
			return nil
		}
	}

	// native parsing

	return fmt.Errorf("unable to unmarshal EnumerableWithParsableTraits from `%v`", data)
}

// MarshalText implements the encoding.TextMarshaler interface for EnumerableWithParsableTraits.
func (e EnumerableWithParsableTraits) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EnumerableWithParsableTraits.
func (e *EnumerableWithParsableTraits) UnmarshalText(text []byte) error {
	s := string(text)
	var err error
	*e, err = ParseEnumerableWithParsableTraits(s)
	if err == nil {
		return nil
	}

	return fmt.Errorf("unable to unmarshal EnumerableWithParsableTraits from `%s`", s)
}

// MarshalYAML implements a YAML Marshaler for EnumerableWithParsableTraits.
func (e EnumerableWithParsableTraits) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for EnumerableWithParsableTraits.
func (e *EnumerableWithParsableTraits) UnmarshalYAML(value *yaml.Node) error {
	var err error

	// first try and parse as a string
	*e, err = ParseEnumerableWithParsableTraits(value.Value)
	if err == nil {
		return nil
	}

	// then try and parse for any string-like traits
	// ints:
	if sint64, err := strconv.ParseInt(value.Value, 10, 64); err != nil {
		*e, err = ParseEnumerableWithParsableTraits(MyEnum(sint64))
		if err == nil {
			return nil
		}
	}

	// native parsing

	return fmt.Errorf("unable to unmarshal EnumerableWithParsableTraits from yaml `%s`", value.Value)
}

// IsEnum implements an empty function required to implement Enum.
func (EnumerableWithParsableTraits) IsEnum() {}
