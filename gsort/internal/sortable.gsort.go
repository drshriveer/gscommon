// Code generated by gsort DO NOT EDIT.
package internal

// SortByProp1 implements a sort.Sort interface for MultiSort.
type SortByProp1 []*MultiSort

func (s SortByProp1) Len() int {
	return len(s)
}
func (s SortByProp1) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
func (s SortByProp1) Less(i, j int) bool {
	return s[i].Property1 < s[j].Property1
}

// SortByProp2 implements a sort.Sort interface for MultiSort.
type SortByProp2 []*MultiSort

func (s SortByProp2) Len() int {
	return len(s)
}
func (s SortByProp2) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
func (s SortByProp2) Less(i, j int) bool {
	if s[i].Property2 == s[j].Property2 {
		return s[i].Property1 < s[j].Property1
	}
	return s[i].Property2 < s[j].Property2
}

// Sortables implements a sort.Sort interface for Sortable.
type Sortables []*Sortable

func (s Sortables) Len() int {
	return len(s)
}
func (s Sortables) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
func (s Sortables) Less(i, j int) bool {
	if s[i].Category.String() == s[j].Category.String() {
		if s[i].Property1 == s[j].Property1 {
			if s[i].Property2 == s[j].Property2 {
				return s[i].property3 < s[j].property3
			}
			return s[i].Property2 < s[j].Property2
		}
		return s[i].Property1 < s[j].Property1
	}
	return s[i].Category.String() < s[j].Category.String()
}
