// Code generated by gerror DO NOT EDIT.
package {{.PkgName}}

import (
	"fmt"

	{{- range $import := $.Imports.GetActive}}
	{{$import.ImportString}}
	{{- end}}
)

{{- range $desc := .ErrorDescs}}

// Error implements the "error" interface.
func (e *{{$desc.TypeName}}) Error() string {
	const separator = ", "
	result := ""
	if name := e.GError.Name; len(name) > 0 {
		result += "Name: " + name + separator
	}
	if dTag := e.GError.ErrDetailTag(); len(dTag) > 0 {
		result += "DTag: " + dTag + separator
	}
	if src := e.GError.Source; len(src) > 0 {
		result += "Source: " + src + separator
	}
	{{- range $field := $desc.FieldsToPrint }}
	result += fmt.Sprintf("{{$field.PrintAs}}: %v", e.{{$field.Name}}) + separator
	{{- end}}

	result += "Message: " + e.Message

	// Note: right now if we have a "source stack", we actually remove the stack after calculations.
	if stack := e.GError.ErrStack(); len(stack) > 0 {
		result += "\n" + stack.String()
	}

	return result
}

{{index $.FactoryComments "Base"}}
func (e *{{$desc.TypeName}}) Base() gerror.Error {
	clone := gerror.CloneBase(e, gerror.NoStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SourceOnly"}}
func (e *{{$desc.TypeName}}) SourceOnly() gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "Stack"}}
func (e *{{$desc.TypeName}}) Stack() gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "Src"}}
func (e *{{$desc.TypeName}}) Src(src string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", src, "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "DTag"}}
func (e *{{$desc.TypeName}}) DTag(dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, "", "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "Msg"}}
func (e *{{$desc.TypeName}}) Msg(format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcDTagMsg"}}
func (e *{{$desc.TypeName}}) SrcDTagMsg(src, dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcDTag"}}
func (e *{{$desc.TypeName}}) SrcDTag(src, dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, src, "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcMsg"}}
func (e *{{$desc.TypeName}}) SrcMsg(src, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "DTagMsg"}}
func (e *{{$desc.TypeName}}) DTagMsg(dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcS"}}
func (e *{{$desc.TypeName}}) SrcS(src string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "DTagS"}}
func (e *{{$desc.TypeName}}) DTagS(dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, "", "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "MsgS"}}
func (e *{{$desc.TypeName}}) MsgS(format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcDTagMsgS"}}
func (e *{{$desc.TypeName}}) SrcDTagMsgS(src, dTag,format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcDTagS"}}
func (e *{{$desc.TypeName}}) SrcDTagS(src, dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, src, "", nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "SrcMsgS"}}
func (e *{{$desc.TypeName}}) SrcMsgS(src, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "DTagMsgS"}}
func (e *{{$desc.TypeName}}) DTagMsgS(dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

{{- if not $.SkipConvertGen }}
{{index $.FactoryComments "Convert"}}
func (e *{{$desc.TypeName}}) Convert(err error) gerror.Error {
	if gerr, ok := err.(gerror.Error); ok {
		return gerr
	}
	clone := gerror.CloneBase(e, gerror.SourceStack, "", "", fmt.Sprintf("originalError: %+v", err), err)
	return e.toPrimaryType(clone)
}

{{index $.FactoryComments "ConvertS"}}
func (e *{{$desc.TypeName}}) ConvertS(err error) gerror.Error {
	if gerr, ok := err.(gerror.Error); ok {
		return gerr
	}
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", fmt.Sprintf("originalError: %+v", err), err)
	return e.toPrimaryType(clone)
}
{{- end }}

// toPrimaryType accepts a base gerror and will populate clone fields.
func (e *{{$desc.TypeName}}) toPrimaryType(gerr *gerror.GError) gerror.Error {
	result := &{{$desc.TypeName}}{
		GError: *gerr,
	{{- range $field := $desc.FieldsToClone }}
		{{$field.Name}}: e.{{$field.Name}},
	{{- end}}
	}
	return result
}

{{- end}}