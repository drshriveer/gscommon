// Code generated by gerror DO NOT EDIT.
package internal

import (
	"fmt"

	"github.com/drshriveer/gtools/gerror"
)

// Error implements the "error" interface.
func (e *ErrWithCustomConvert) Error() string {
	const separator = ", "
	result := ""
	if name := e.GError.Name; len(name) > 0 {
		result += "Name: " + name + separator
	}
	if dTag := e.GError.ErrDetailTag(); len(dTag) > 0 {
		result += "DTag: " + dTag + separator
	}
	if src := e.GError.Source; len(src) > 0 {
		result += "Source: " + src + separator
	}
	result += fmt.Sprintf("Property: %v", e.Property) + separator

	result += "Message: " + e.Message

	// Note: right now if we have a "source stack", we actually remove the stack after calculations.
	if stack := e.GError.ErrStack(); len(stack) > 0 {
		result += "\n" + stack.String()
	}

	return result
}

// Base clones the error without modifications.
func (e *ErrWithCustomConvert) Base() gerror.Error {
	clone := gerror.CloneBase(e, gerror.NoStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

// SourceOnly clones the error and ensures Source is populated.
func (e *ErrWithCustomConvert) SourceOnly() gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

// Stack clones the error and ensures there is a Stack. Source will also be populated
// if not already set.
func (e *ErrWithCustomConvert) Stack() gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

// Src clones the error with a custom source.
func (e *ErrWithCustomConvert) Src(src string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", src, "", nil)
	return e.toPrimaryType(clone)
}

// DTag clones the error with a detailTag, and will populate Source if needed.
func (e *ErrWithCustomConvert) DTag(dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, "", "", nil)
	return e.toPrimaryType(clone)
}

// Msg clones the error, extends its message, and will populate a Source if needed.
func (e *ErrWithCustomConvert) Msg(format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// DTagSrcMsg clones the error, adds a Detail tag, custom source, and extends its message.
func (e *ErrWithCustomConvert) SrcDTagMsg(src, dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// SrcDTag clones the error, adds a detail tag and source.
func (e *ErrWithCustomConvert) SrcDTag(src, dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, src, "", nil)
	return e.toPrimaryType(clone)
}

// SrcMsg clones the error, adds a source, and extends its message.
func (e *ErrWithCustomConvert) SrcMsg(src, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, "", src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// DTagSrc clones the error, adds a detail tag, and extends its message.
func (e *ErrWithCustomConvert) DTagMsg(dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.SourceStack, dTag, "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// SrcS is the same as Src but also includes a full StackTrace.
func (e *ErrWithCustomConvert) SrcS(src string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", "", nil)
	return e.toPrimaryType(clone)
}

// DTagS is the same as DTag but also includes a full StackTrace.
func (e *ErrWithCustomConvert) DTagS(dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, "", "", nil)
	return e.toPrimaryType(clone)
}

// MsgS is the same as Msg but also includes a full StackTrace.
func (e *ErrWithCustomConvert) MsgS(format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// SrcDTagMsgS is the same as DTagSrcMsg but also includes a full StackTrace.
func (e *ErrWithCustomConvert) SrcDTagMsgS(src, dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// SrcDTagS is the same as DTagSrc but also includes a full StackTrace.
func (e *ErrWithCustomConvert) SrcDTagS(src, dTag string) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, src, "", nil)
	return e.toPrimaryType(clone)
}

// SrcMsgS is the same as SrcMsg but also includes a full StackTrace.
func (e *ErrWithCustomConvert) SrcMsgS(src, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, "", src, fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// DTagSrcS is the same as DTagMsg but also includes a full StackTrace.
func (e *ErrWithCustomConvert) DTagMsgS(dTag, format string, elems ...any) gerror.Error {
	clone := gerror.CloneBase(e, gerror.DefaultStack, dTag, "", fmt.Sprintf(format, elems...), nil)
	return e.toPrimaryType(clone)
}

// toPrimaryType accepts a base gerror and will populate clone fields.
func (e *ErrWithCustomConvert) toPrimaryType(gerr *gerror.GError) gerror.Error {
	result := &ErrWithCustomConvert{
		GError:   *gerr,
		Property: e.Property,
	}
	return result
}
