// Code generated by genum DO NOT EDIT.
package internal

import (
	"encoding/json"
	"fmt"
)

// IsValid has a terrible implementation, but returns true if the value is, well, valid.
func (e DimensionOne) IsValid() bool {
	_, err := e.ParseString(e.String())
	return err == nil
}

// Values returns a list of all potential values of this enum.
func (DimensionOne) Values() []DimensionOne {
	return []DimensionOne{
		D1a,
		D1b,
		D1c,
		D1d,
	}
}

// StringValues returns a list of all potential values of this enum as strings.
func (DimensionOne) StringValues() []string {
	return []string{
		"D1a",
		"D1b",
		"D1c",
		"D1d",
	}
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e DimensionOne) String() string {
	switch e {
	case D1a:
		return "D1a"
	case D1b:
		return "D1b"
	case D1c:
		return "D1c"
	case D1d:
		return "D1d"
	default:
		return fmt.Sprintf("UndefinedDimensionOne:%d", e)
	}
}

// ParseString will return a value as defined in string form.
func (e DimensionOne) ParseString(text string) (DimensionOne, error) {
	switch text {
	case "D1a":
		return D1a, nil
	case "D1b":
		return D1b, nil
	case "D1c":
		return D1c, nil
	case "D1d":
		return D1d, nil
	default:
		return 0, fmt.Errorf("`%s` is not a valid enum of type DimensionOne", text)
	}
}

// MarshalJSON implements the json.Marshaler interface for DimensionOne.
func (e DimensionOne) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DimensionOne.
func (e *DimensionOne) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
		var err error
		*e, err = DimensionOne(0).ParseString(s)
		return err
	}
	var i int
	if err := json.Unmarshal(data, &i); err == nil {
		*e = DimensionOne(i)
		if e.IsValid() {
			return nil
		}
	}

	return fmt.Errorf("unable to unmarshal DimensionOne from `%v`", data)
}

// MarshalText implements the encoding.TextMarshaler interface for DimensionOne.
func (e DimensionOne) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DimensionOne.
func (e *DimensionOne) UnmarshalText(text []byte) error {
	var err error
	*e, err = DimensionOne(0).ParseString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DimensionOne.
func (e DimensionOne) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DimensionOne.
func (e *DimensionOne) UnmarshalYAML(unmarshal func(any) error) error {
	var s string
	if err := unmarshal(&s); err == nil {
		var err error
		*e, err = DimensionOne(0).ParseString(s)
		return err
	}
	var i int
	if err := unmarshal(&i); err == nil {
		*e = DimensionOne(i)
		if e.IsValid() {
			return nil
		}
	}

	return fmt.Errorf("unable to unmarshal DimensionOne from yaml")
}

// IsEnum implements an empty function required to implement Enum.
func (DimensionOne) IsEnum() {}

// IsValid has a terrible implementation, but returns true if the value is, well, valid.
func (e DimensionTwo) IsValid() bool {
	_, err := e.ParseString(e.String())
	return err == nil
}

// Values returns a list of all potential values of this enum.
func (DimensionTwo) Values() []DimensionTwo {
	return []DimensionTwo{
		D2a,
		D2b,
		D2c,
		D2d,
		D2e,
	}
}

// StringValues returns a list of all potential values of this enum as strings.
func (DimensionTwo) StringValues() []string {
	return []string{
		"D2a",
		"D2b",
		"D2c",
		"D2d",
		"D2e",
	}
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e DimensionTwo) String() string {
	switch e {
	case D2a:
		return "D2a"
	case D2b:
		return "D2b"
	case D2c:
		return "D2c"
	case D2d:
		return "D2d"
	case D2e:
		return "D2e"
	default:
		return fmt.Sprintf("UndefinedDimensionTwo:%d", e)
	}
}

// ParseString will return a value as defined in string form.
func (e DimensionTwo) ParseString(text string) (DimensionTwo, error) {
	switch text {
	case "D2a":
		return D2a, nil
	case "D2b":
		return D2b, nil
	case "D2c":
		return D2c, nil
	case "D2d":
		return D2d, nil
	case "D2e":
		return D2e, nil
	default:
		return 0, fmt.Errorf("`%s` is not a valid enum of type DimensionTwo", text)
	}
}

// MarshalJSON implements the json.Marshaler interface for DimensionTwo.
func (e DimensionTwo) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DimensionTwo.
func (e *DimensionTwo) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
		var err error
		*e, err = DimensionTwo(0).ParseString(s)
		return err
	}
	var i int
	if err := json.Unmarshal(data, &i); err == nil {
		*e = DimensionTwo(i)
		if e.IsValid() {
			return nil
		}
	}

	return fmt.Errorf("unable to unmarshal DimensionTwo from `%v`", data)
}

// MarshalText implements the encoding.TextMarshaler interface for DimensionTwo.
func (e DimensionTwo) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DimensionTwo.
func (e *DimensionTwo) UnmarshalText(text []byte) error {
	var err error
	*e, err = DimensionTwo(0).ParseString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for DimensionTwo.
func (e DimensionTwo) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DimensionTwo.
func (e *DimensionTwo) UnmarshalYAML(unmarshal func(any) error) error {
	var s string
	if err := unmarshal(&s); err == nil {
		var err error
		*e, err = DimensionTwo(0).ParseString(s)
		return err
	}
	var i int
	if err := unmarshal(&i); err == nil {
		*e = DimensionTwo(i)
		if e.IsValid() {
			return nil
		}
	}

	return fmt.Errorf("unable to unmarshal DimensionTwo from yaml")
}

// IsEnum implements an empty function required to implement Enum.
func (DimensionTwo) IsEnum() {}
