// Code generated by genum DO NOT EDIT.
package {{.PkgName}}

import (
    {{- if .GenJSON}}
    "encoding/json"
    {{- end}}
	{{- range $import := $.Imports}}
	"{{$import}}"
    {{- end}}
    "fmt"
)
{{- range $i, $enumTypeName := .EnumTypeNames}}
{{- range $trait := (index $.Traits $i)}}

// {{$trait.Name}} returns the enum's associated trait of the same name, and a bool
// indicating whether the trait exists.
func (e {{$enumTypeName}}) {{$trait.Name}}() ({{$trait.Type}}, bool) {
    switch e {
	{{- range $instance := $trait.Traits}}
    case {{$instance.OwningValue.Name}}:
        return {{$instance.VariableName}}, true
    {{- end }}
    }

	var result {{$trait.Type}}
	return result, false
}
{{ end }}
{{- $values := (index $.Values $i)}}
// IsValid has a terrible implementation, but returns true if the value is, well, valid.
func (e {{$enumTypeName}}) IsValid() bool {
    _, err := e.ParseString(e.String())
    return err == nil
}

// Values returns a list of all potential values of this enum.
func ({{$enumTypeName}}) Values() []{{$enumTypeName}} {
    return []{{$enumTypeName}}{
    {{- range $val := $values}}
        {{$val.Name}},
    {{- end }}
    }
}

// StringValues returns a list of all potential values of this enum as strings.
func ({{$enumTypeName}}) StringValues() []string {
    return []string{
    {{- range $val := $values}}
        "{{$val.Name}}",
    {{- end }}
    }
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e {{$enumTypeName}}) String() string {
    switch e {
    {{- range $val := $values.ValueDeduplicatedSet}}
    case {{$val.Name}}:
        return "{{$val.Name}}"
    {{- end }}
    default:
        return fmt.Sprintf("Undefined{{$enumTypeName}}:%d", e)
    }
}

// ParseString will return a value as defined in string form.
func (e {{$enumTypeName}}) ParseString(text string) ({{$enumTypeName}}, error) {
    switch text {
    {{- range $val := $values}}
    case "{{$val.Name}}":
        return {{$val.Name}}, nil
    {{- end }}
    default:
        return 0, fmt.Errorf("`%s` is not a valid enum of type {{$enumTypeName}}", text)
    }
}
{{- if $.GenJSON }}

// MarshalJSON implements the json.Marshaler interface for {{$enumTypeName}}.
func (e {{$enumTypeName}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for {{$enumTypeName}}.
func (e *{{$enumTypeName}}) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
        var err error
        *e, err = {{$enumTypeName}}(0).ParseString(s)
        return err
	}
	var i int
	if err := json.Unmarshal(data, &i); err == nil {
        *e = {{$enumTypeName}}(i)
        if e.IsValid() {
            return nil
        }
    }

    return fmt.Errorf("unable to unmarshal {{$enumTypeName}} from `%v`", data)
}
{{- end}}
{{- if $.GenText }}

// MarshalText implements the encoding.TextMarshaler interface for {{$enumTypeName}}.
func (e {{$enumTypeName}}) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for {{$enumTypeName}}.
func (e *{{$enumTypeName}}) UnmarshalText(text []byte) error {
    var err error
	*e, err = {{$enumTypeName}}(0).ParseString(string(text))
	return err
}
{{- end}}
{{- if $.GenYAML }}

// MarshalYAML implements a YAML Marshaler for {{$enumTypeName}}.
func (e {{$enumTypeName}}) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for {{$enumTypeName}}.
func (e *{{$enumTypeName}}) UnmarshalYAML(unmarshal func(any) error) error {
	var s string
	if err := unmarshal(&s); err == nil {
        var err error
        *e, err = {{$enumTypeName}}(0).ParseString(s)
        return err
	}
	var i int
	if err := unmarshal(&i); err == nil {
        *e = {{$enumTypeName}}(i)
        if e.IsValid() {
            return nil
        }
    }

    return fmt.Errorf("unable to unmarshal {{$enumTypeName}} from yaml")
}

// IsEnum implements an empty function required to implement Enum.
func ({{$enumTypeName}}) IsEnum() {}

{{- end}}
{{- end}}