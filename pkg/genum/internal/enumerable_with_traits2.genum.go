// Code generated by genum DO NOT EDIT.
package internal

import (
	"encoding/json"
	"fmt"
	"slices"
	"strconv"

	"gopkg.in/yaml.v3"
)

var _CreaturesAltValues = []CreaturesAlt{
	NotCreaturesAlt,
	CatAlt,
	AntAlt,
}

// IsMammal returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e CreaturesAlt) IsMammal() bool {
	switch e {
	case NotCreaturesAlt:
		return _IsMammal
	case CatAlt:
		return true
	case AntAlt:
		return false
	}

	return *new(bool)
}

// NumLegs returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e CreaturesAlt) NumLegs() int {
	switch e {
	case NotCreaturesAlt:
		return _NumLegs
	case CatAlt:
		return 4
	case AntAlt:
		return 6
	}

	return *new(int)
}

// Uint64Thing returns the enum's associated trait of the same name.
// If no trait exists for the enumeration a default value will be returned.
func (e CreaturesAlt) Uint64Thing() uint64 {
	switch e {
	case NotCreaturesAlt:
		return _Uint64Thing
	case CatAlt:
		return uint64(65320)
	case AntAlt:
		return uint64(320)
	}

	return *new(uint64)
}

// IsValid returns true if the enum value is, in fact, valid.
func (e CreaturesAlt) IsValid() bool {
	for _, v := range _CreaturesAltValues {
		if v == e {
			return true
		}
	}
	return false
}

// Values returns a list of all potential values of this enum.
func (CreaturesAlt) Values() []CreaturesAlt {
	return slices.Clone(_CreaturesAltValues)
}

// StringValues returns a list of all potential values of this enum as strings.
// Note: This does not return duplicates.
func (CreaturesAlt) StringValues() []string {
	return []string{
		"NotCreaturesAlt",
		"CatAlt",
		"AntAlt",
	}
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e CreaturesAlt) String() string {
	switch e {
	case NotCreaturesAlt:
		return "NotCreaturesAlt"
	case CatAlt:
		return "CatAlt"
	case AntAlt:
		return "AntAlt"
	default:
		return fmt.Sprintf("UndefinedCreaturesAlt:%d", e)
	}
}

// ParseString will return a value as defined in string form.
func (e CreaturesAlt) ParseString(text string) (CreaturesAlt, error) {
	switch text {
	case "NotCreaturesAlt":
		return NotCreaturesAlt, nil
	case "CatAlt":
		return CatAlt, nil
	case "AntAlt":
		return AntAlt, nil
	default:
		return 0, fmt.Errorf("`%s` is not a valid enum of type CreaturesAlt", text)
	}
}

// MarshalJSON implements the json.Marshaler interface for CreaturesAlt.
func (e CreaturesAlt) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CreaturesAlt.
func (e *CreaturesAlt) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
		var err error
		*e, err = CreaturesAlt(0).ParseString(s)
		return err
	}
	var i int
	if err := json.Unmarshal(data, &i); err == nil {
		*e = CreaturesAlt(i)
		if e.IsValid() {
			return nil
		}
	}

	return fmt.Errorf("unable to unmarshal CreaturesAlt from `%v`", data)
}

// MarshalText implements the encoding.TextMarshaler interface for CreaturesAlt.
func (e CreaturesAlt) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CreaturesAlt.
func (e *CreaturesAlt) UnmarshalText(text []byte) error {
	var err error
	*e, err = CreaturesAlt(0).ParseString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CreaturesAlt.
func (e CreaturesAlt) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CreaturesAlt.
func (e *CreaturesAlt) UnmarshalYAML(value *yaml.Node) error {
	i, err := strconv.ParseInt(value.Value, 10, 64)
	if err == nil {
		*e = CreaturesAlt(i)
	} else {
		*e, err = CreaturesAlt(0).ParseString(value.Value)
	}
	if err != nil {
		return err
	} else if e.IsValid() {
		return nil
	}
	return fmt.Errorf("unable to unmarshal CreaturesAlt from yaml `%s`", value.Value)
}

// IsEnum implements an empty function required to implement Enum.
func (CreaturesAlt) IsEnum() {}
