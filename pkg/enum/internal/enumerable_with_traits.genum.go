// Code generated by genum DO NOT EDIT.
package internal

import (
    "encoding/json"
	"time"
    "fmt"
)

// Timeout returns the enum's associated trait of the same name, and a bool
// indicating whether the trait exists.
func (e EnumerableWithTraits) Timeout() (time.Duration, bool) {
    switch e {
    case E1:
        return E1_Timeout, true
    case E2:
        return E2_Timeout, true
    case E3:
        return E3_Timeout, true
    }

	var result time.Duration
	return result, false
}


// Trait returns the enum's associated trait of the same name, and a bool
// indicating whether the trait exists.
func (e EnumerableWithTraits) Trait() (string, bool) {
    switch e {
    case E1:
        return E1_Trait, true
    case E2:
        return E2_Trait, true
    case E3:
        return E3_Trait, true
    }

	var result string
	return result, false
}

// IsValid has a terrible implementation, but returns true if the value is, well, valid.
func (e EnumerableWithTraits) IsValid() bool {
    _, err := e.ParseString(e.String())
    return err == nil
}

// Values returns a list of all potential values of this enum.
func (EnumerableWithTraits) Values() []EnumerableWithTraits {
    return []EnumerableWithTraits{
        E1,
        E2,
        E3,
    }
}

// StringValues returns a list of all potential values of this enum as strings.
func (EnumerableWithTraits) StringValues() []string {
    return []string{
        "E1",
        "E2",
        "E3",
    }
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e EnumerableWithTraits) String() string {
    switch e {
    case E1:
        return "E1"
    case E2:
        return "E2"
    case E3:
        return "E3"
    default:
        return fmt.Sprintf("UndefinedEnumerableWithTraits:%d", e)
    }
}

// ParseString will return a value as defined in string form.
func (e EnumerableWithTraits) ParseString(text string) (EnumerableWithTraits, error) {
    switch text {
    case "E1":
        return E1, nil
    case "E2":
        return E2, nil
    case "E3":
        return E3, nil
    default:
        return 0, fmt.Errorf("`%s` is not a valid enum of type EnumerableWithTraits", text)
    }
}

// MarshalJSON implements the json.Marshaler interface for EnumerableWithTraits.
func (e EnumerableWithTraits) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EnumerableWithTraits.
func (e *EnumerableWithTraits) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
        var err error
        *e, err = EnumerableWithTraits(0).ParseString(s)
        return err
	}
	var i int
	if err := json.Unmarshal(data, &i); err == nil {
        *e = EnumerableWithTraits(i)
        if e.IsValid() {
            return nil
        }
    }

    return fmt.Errorf("unable to unmarshal EnumerableWithTraits from `%v`", data)
}

// MarshalText implements the encoding.TextMarshaler interface for EnumerableWithTraits.
func (e EnumerableWithTraits) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EnumerableWithTraits.
func (e *EnumerableWithTraits) UnmarshalText(text []byte) error {
    var err error
	*e, err = EnumerableWithTraits(0).ParseString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for EnumerableWithTraits.
func (e EnumerableWithTraits) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for EnumerableWithTraits.
func (e *EnumerableWithTraits) UnmarshalYAML(unmarshal func(any) error) error {
	var s string
	if err := unmarshal(&s); err == nil {
        var err error
        *e, err = EnumerableWithTraits(0).ParseString(s)
        return err
	}
	var i int
	if err := unmarshal(&i); err == nil {
        *e = EnumerableWithTraits(i)
        if e.IsValid() {
            return nil
        }
    }

    return fmt.Errorf("unable to unmarshal EnumerableWithTraits from yaml")
}

// IsEnum implements an empty function required to implement Enum.
func (*EnumerableWithTraits) IsEnum() {}