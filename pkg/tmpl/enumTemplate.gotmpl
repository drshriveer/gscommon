package {{.PkgName}}

import (
    "encoding/json"
    "fmt"
)

// IsValid has a terrible implementation, but returns true if the value is, well, valid.
func (e {{.EnumTypeName}}) IsValid() bool {
    _, err := e.ParseString(e.String())
    return err == nil
}

// Values returns a list of all potential values of this enum.
func (e {{.EnumTypeName}}) Values() []{{.EnumTypeName}} {
    return []{{.EnumTypeName}}{
    {{- range $val := .Values}}
        {{$val.Name}},
    {{- end }}
    }
}

// String returns a string representation of this enum.
// Note: in the case of duplicate values only the first alphabetical definition will be choosen.
func (e {{.EnumTypeName}}) String() string {
    switch e {
    {{- range $val := .Values.ValueDeduplicatedSet}}
    case {{$val.Name}}:
        return "{{$val.Name}}"
    {{- end }}
    default:
        return fmt.Sprintf("Undefined{{.EnumTypeName}}:%d", e)
    }
}

// PareString will return a value as defined in string form.
func (e {{.EnumTypeName}}) ParseString(text string) ({{.EnumTypeName}}, error) {
    switch text {
    {{- range $val := .Values}}
    case "{{$val.Name}}":
        return {{$val.Name}}, nil
    {{- end }}
    default:
        return 0, fmt.Errorf("`%s` is not a valid enum of type {{.EnumTypeName}}", text)
    }
}
{{- if .GenJSON }}

// MarshalJSON implements the json.Marshaler interface for {{.EnumTypeName}}.
func (e {{.EnumTypeName}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for {{.EnumTypeName}}.
func (e *{{.EnumTypeName}}) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
        var err error
        *e, err = {{.EnumTypeName}}(0).ParseString(s)
        return err
	}
	var i int
	if err := json.Unmarshal(data, &i); err == nil {
        *e = {{.EnumTypeName}}(i)
        if e.IsValid() {
            return nil
        }
    }

    return fmt.Errorf("unable to unmarshal {{.EnumTypeName}} from `%v`", data)
}
{{- end}}
{{- if .GenText }}

// MarshalText implements the encoding.TextMarshaler interface for {{.EnumTypeName}}.
func (e {{.EnumTypeName}}) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for {{.EnumTypeName}}.
func (e *{{.EnumTypeName}}) UnmarshalText(text []byte) error {
    var err error
	*e, err = {{.EnumTypeName}}(0).ParseString(string(text))
	return err
}
{{- end}}
{{- if .GenYAML }}

// MarshalYAML implements a YAML Marshaler for {{.EnumTypeName}}.
func (e {{.EnumTypeName}}) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for {{.EnumTypeName}}.
func (e *{{.EnumTypeName}}) UnmarshalYAML(unmarshal func(any) error) error {
	var s string
	if err := unmarshal(&s); err == nil {
        var err error
        *e, err = {{.EnumTypeName}}(0).ParseString(s)
        return err
	}
	var i int
	if err := unmarshal(&i); err == nil {
        *e = {{.EnumTypeName}}(i)
        if e.IsValid() {
            return nil
        }
    }

    return fmt.Errorf("unable to unmarshal {{.EnumTypeName}} from yaml")
}
{{- end}}